#!/usr/bin/env python
"""Generates the board pin dictionary file for the SAMD port."""

import argparse
import sys
import csv

dict_header = """// This file was automatically generated by make-pin-dict.py
//
"""


class Pins:
    def __init__(self):
        self.board_pins = []  # list of pin objects

    def parse_csv_file(self, filename):
        with open(filename, "r") as csvfile:
            rows = csv.reader(csvfile)
            for row in rows:
                # Pin numbers must start with "PA", "PB"
                if len(row) > 1 and row[1].strip().upper()[:2] in ("PA", "PB"):
                    self.board_pins.append(row)

    def print_dict(self, dict_filename):
        with open(dict_filename, "wt") as dict_file:
            dict_file.write(dict_header)

            # Create the board pins dictionary table

            dict_file.write("// The board pins dictionary\n")
            dict_file.write("#define PIN_BOARD_DICT \\\n")
            dict_file.write(
                "STATIC const mp_rom_map_elem_t pin_board_pins_locals_dict_table[] = { \\\n"
            )
            for row in self.board_pins:
                pin = row[1].upper()
                offset = 0 if pin[1] == "A" else 16
                try:
                    index = int(pin[2:])
                    dict_file.write(
                        "    { MP_ROM_QSTR(MP_QSTR_%s), MP_ROM_PTR(&machine_pin_obj[%d]) }, \\\n"
                        % (row[0].upper(), index + offset)
                    )
                except:
                    pass
            dict_file.write("}; \\\n")
            dict_file.write(
                "MP_DEFINE_CONST_DICT(machine_pin_board_pins_locals_dict, pin_board_pins_locals_dict_table);\n"
            )


def main():
    parser = argparse.ArgumentParser(
        prog="make-pin-dict.py",
        usage="%(prog)s [options] [command]",
        description="Generate the MCU-specific board pin dictionary",
    )
    parser.add_argument(
        "-b",
        "--board",
        dest="csv_filename",
        help="Specifies the pins.csv filename",
    )
    parser.add_argument(
        "-t",
        "--table",
        dest="dict_filename",
        help="Specifies the name of the generated board pin dictionary file",
    )
    args = parser.parse_args(sys.argv[1:])

    pins = Pins()

    if args.csv_filename:
        pins.parse_csv_file(args.csv_filename)

    if args.dict_filename:
        pins.print_dict(args.dict_filename)


if __name__ == "__main__":
    main()
